{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\KOMAL\\\\Desktop\\\\k\\\\react-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\KOMAL\\\\Desktop\\\\k\\\\react-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = void 0;\n\nvar Directions_1 = require(\"../Enums/Directions\");\n\nvar NumberUtils = /*#__PURE__*/function () {\n  function NumberUtils() {\n    _classCallCheck(this, NumberUtils);\n  }\n\n  _createClass(NumberUtils, null, [{\n    key: \"clamp\",\n    value: function clamp(num, min, max) {\n      return Math.min(Math.max(num, min), max);\n    }\n  }, {\n    key: \"mix\",\n    value: function mix(comp1, comp2, weight1, weight2) {\n      return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n  }, {\n    key: \"randomInRange\",\n    value: function randomInRange(r1, r2) {\n      var max = Math.max(r1, r2),\n          min = Math.min(r1, r2);\n      return Math.random() * (max - min) + min;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(options) {\n      var random = options.random;\n\n      var _ref = typeof random === \"boolean\" ? {\n        enable: random,\n        minimumValue: 0\n      } : random,\n          enable = _ref.enable,\n          minimumValue = _ref.minimumValue;\n\n      return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n    }\n  }, {\n    key: \"getDistances\",\n    value: function getDistances(pointA, pointB) {\n      var dx = pointA.x - pointB.x;\n      var dy = pointA.y - pointB.y;\n      return {\n        dx: dx,\n        dy: dy,\n        distance: Math.sqrt(dx * dx + dy * dy)\n      };\n    }\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(pointA, pointB) {\n      return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n  }, {\n    key: \"getParticleBaseVelocity\",\n    value: function getParticleBaseVelocity(particle) {\n      var velocityBase;\n\n      switch (particle.direction) {\n        case Directions_1.MoveDirection.top:\n          velocityBase = {\n            x: 0,\n            y: -1\n          };\n          break;\n\n        case Directions_1.MoveDirection.topRight:\n          velocityBase = {\n            x: 0.5,\n            y: -0.5\n          };\n          break;\n\n        case Directions_1.MoveDirection.right:\n          velocityBase = {\n            x: 1,\n            y: -0\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottomRight:\n          velocityBase = {\n            x: 0.5,\n            y: 0.5\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottom:\n          velocityBase = {\n            x: 0,\n            y: 1\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottomLeft:\n          velocityBase = {\n            x: -0.5,\n            y: 1\n          };\n          break;\n\n        case Directions_1.MoveDirection.left:\n          velocityBase = {\n            x: -1,\n            y: 0\n          };\n          break;\n\n        case Directions_1.MoveDirection.topLeft:\n          velocityBase = {\n            x: -0.5,\n            y: -0.5\n          };\n          break;\n\n        default:\n          velocityBase = {\n            x: 0,\n            y: 0\n          };\n          break;\n      }\n\n      return velocityBase;\n    }\n  }, {\n    key: \"rotateVelocity\",\n    value: function rotateVelocity(velocity, angle) {\n      return {\n        horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n        vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n      };\n    }\n  }, {\n    key: \"collisionVelocity\",\n    value: function collisionVelocity(v1, v2, m1, m2) {\n      return {\n        horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n        vertical: v1.vertical\n      };\n    }\n  }]);\n\n  return NumberUtils;\n}();\n\nexports.NumberUtils = NumberUtils;","map":null,"metadata":{},"sourceType":"script"}