{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\KOMAL\\\\Desktop\\\\k\\\\react-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\KOMAL\\\\Desktop\\\\k\\\\react-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\KOMAL\\\\Desktop\\\\k\\\\react-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.limit = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n\n  _createClass(Particles, [{\n    key: \"init\",\n    value: function init() {\n      var container = this.container;\n      var options = container.options;\n      this.linksFreq = new Map();\n      this.trianglesFreq = new Map();\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(options.manualParticles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (!handled) {\n        for (var i = this.count; i < options.particles.number.value; i++) {\n          this.addParticle();\n        }\n      }\n\n      if (options.infection.enable) {\n        for (var _i = 0; _i < options.infection.infections; _i++) {\n          var notInfected = this.array.filter(function (p) {\n            return p.infecter.infectionStage === undefined;\n          });\n          var infected = Utils_1.Utils.itemFromArray(notInfected);\n          infected.infecter.startInfection(0);\n        }\n      }\n\n      this.interactionManager.init();\n      container.noise.init();\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index, quantity) {\n      if (index >= 0 && index <= this.count) {\n        var _iterator3 = _createForOfIteratorHelper(this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var particle = _step3.value;\n            particle.destroy();\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle) {\n      this.removeAt(this.array.indexOf(particle));\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.noise.update();\n\n      var _iterator4 = _createForOfIteratorHelper(this.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _particle = _step4.value;\n\n          _particle.move(delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator5 = _createForOfIteratorHelper(this.container.particles.array),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _particle2 = _step5.value;\n\n          _particle2.update(delta);\n\n          if (!_particle2.destroyed && !_particle2.spawning) {\n            this.interactionManager.particlesInteract(_particle2, delta);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n      this.update(delta);\n\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              plugin = _step6$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this.array),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var p = _step7.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions) {\n      var container = this.container;\n      var options = container.options;\n      var limit = options.particles.number.limit * container.density;\n      this.pushing = true;\n\n      if (limit > 0) {\n        var countToRemove = this.count + nb - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions) {\n      try {\n        var particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n        this.array.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (_a) {\n        console.warn(\"error adding particle\");\n        return;\n      }\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity) {\n      this.removeAt(0, quantity);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var key = \"\".concat(Math.min(p1.id, p2.id), \"_\").concat(Math.max(p1.id, p2.id));\n      var res = this.linksFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.linksFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.trianglesFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.trianglesFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.options;\n      this.applyDensity(options.particles);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n      var particlesCount = this.count;\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element;\n      var pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":null,"metadata":{},"sourceType":"script"}